/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.screenspace.controller;

import com.example.screenspace.model.Movie;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.annotation.processing.Generated;
import javax.validation.constraints.*;
import java.util.List;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-25T13:49:06.606500-03:00[America/Argentina/Buenos_Aires]")
@Validated
public interface MovieApi {


    @Operation(summary = "Get list of all movies", description = "", tags={ "Movies" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Movie.class)))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/movie",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Movie>> movieGet();


    @Operation(summary = "Get a movie from id", description = "", tags={ "Movies" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/movie/{movieId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Movie> movieMovieIdGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("movieId") Integer movieId);


    @Operation(summary = "Get list of all movies from movie-theater", description = "", tags={ "Movie" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Movie.class)))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema/{cinemaId}/movie-theater/{theaterId}/shows/{showId}/movies",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Movie>> cinemaCinemaIdMovieTheaterTheaterIdShowsShowIdMoviesGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the cinema to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("cinemaId") Integer cinemaId, @Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie theater to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("theaterId") Integer theaterId, @Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie theater to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("showId") Integer showId);


    @Operation(summary = "Get a movie id from movie-theater", description = "", tags={ "Movie" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Movie.class))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema/{cinemaId}/movie-theater/{theaterId}/shows/{showId}/movies/{movieId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Movie> cinemaCinemaIdMovieTheaterTheaterIdShowsShowIdMoviesMovieIdGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the cinema to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("cinemaId") Integer cinemaId, @Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("movieId") Integer movieId, @Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie theater to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("theaterId") Integer theaterId, @Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie theater shows to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("showId") Integer showId);


}

