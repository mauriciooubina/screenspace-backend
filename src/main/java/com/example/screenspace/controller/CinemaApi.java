/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.44).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.example.screenspace.controller;

import com.example.screenspace.model.*;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;

import javax.annotation.processing.Generated;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.util.List;

@Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2023-05-25T13:49:06.606500-03:00[America/Argentina/Buenos_Aires]")
@Validated
public interface CinemaApi {

    @Operation(summary = "Get list of cinemas", description = "", tags={ "Cinema" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cinema.class)))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Cinema>> cinemaGet(@RequestParam(required = false) Integer userId);


    @Operation(summary = "Get a cinema from id", description = "", tags={ "Cinema" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cinema.class))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema/{cinemaId}",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<Cinema> cinemaCinemaIdGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the cinema to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("cinemaId") Integer cinemaId);


    @Operation(summary = "Create a cinema", description = "", tags={ "Cinema" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cinema.class))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema",
            produces = { "application/json" },
            method = RequestMethod.POST)
    ResponseEntity<Cinema> cinemaPost(@Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Cinema body);


    @Operation(summary = "Edit a cinema for a movie theater", description = "", tags={ "Cinema" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "201", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cinema.class))),

            @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema/{cinemaId}",
            produces = { "application/json" },
            method = RequestMethod.PUT)
    ResponseEntity<Cinema> cinemaCinemaIdPut(@Min(1) @Parameter(in = ParameterIn.PATH, description = "The ID of the cinema to return.", required = true, schema = @Schema(allowableValues = {}, minimum = "1")) @PathVariable("cinemaId") Integer cinemaId,
    @Parameter(in = ParameterIn.DEFAULT, description = "", required = true, schema = @Schema()) @Valid @RequestBody Cinema body);


    @Operation(summary = "Delete a cinema", description = "", tags={ "Cinema" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Cinema.class))),
        
        @ApiResponse(responseCode = "404", description = "Error 404 not found", content = @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))) })
    @RequestMapping(value = "/cinema/{cinemaId}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<Cinema> cinemaCinemaIdDelete(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the cinema to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
)) @PathVariable("cinemaId") Integer cinemaId);


    @Operation(summary = "Get available cinemas for a movie", description = "", tags={ "Cinemas for a Movie" })
    @ApiResponses(value = {
            @ApiResponse(responseCode = "200", description = "Succesfull request", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Cinema.class)))) })
    @RequestMapping(value = "/movie/{movieId}/cinemas",
            produces = { "application/json" },
            method = RequestMethod.GET)
    ResponseEntity<List<Cinema>> movieMovieIdCinemasGet(@Min(1)@Parameter(in = ParameterIn.PATH, description = "The ID of the movie to return.", required=true, schema=@Schema(allowableValues={  }, minimum="1"
    )) @PathVariable("movieId") Integer movieId);


}

